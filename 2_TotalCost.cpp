// Задача 2. Что нужно сделать. С помощью списка инициализации задаётся вектор цен на продукты (дробными числами). Таким же образом с помощью списка инициализации задаётся вектор покупок (в виде индексов), которые совершает человек. Необходимо вывести на экран итоговую стоимость покупок. Вектор цен и вектор покупок можно задать напрямую в коде.

/*// Вектор цен выглядит так: {2.5, 4.25, 3.0, 10.0}.
std::vector<float> prices {2.5, 4.25, 3.0, 10.0};
// Вектор покупок: {1, 1, 0, 3}, то есть два товара по индексу 1 и по одному — индексов 0 и 3.
std::vector<int> items {1, 1, 0, 3};*/

// Суммарная стоимость будет равна 21.0.
// Советы и рекомендации. При получении итоговой стоимости покупок не нужно делать циклы по обоим векторам, достаточно одного цикла.
// Что оценивается. Программа не допускает выхода за границы вектора цен.

#include <iostream>
#include <vector>

int main()
{
    std::vector<float> prices {2.5, 4.25, 3.0, 10.0};
    std::cout << "Prices: ";
    for (int i = 0; i < prices.size(); i++)
    {
        std::cout << " | " << prices[i];
    }
    std::cout << " |\n\n";

    std::vector<int> items {1, 1, 0, 3, -1, 7};
    std::cout << "Items: ";
    for (int i = 0; i < items.size(); i++)
    {
        std::cout << " | " << items[i];
    }
    std::cout << " |\n\n";

    float sum = 0.f;
    int count = 0;

    for (int i = 0; i < items.size(); i++)
    {
        if (items[i] >= 0 && items[i] < prices.size())
        {
            sum += prices[items[i]];
            count++;
        }
        else
        {
            std::cout << "Invalid index: " << items[i] << std::endl;
        }
    }

    std::cout << "\nTotal items: " << count
              << "\nTotal cost: " << sum;
}