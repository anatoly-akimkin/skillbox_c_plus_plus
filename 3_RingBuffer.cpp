// Задача 3. Что нужно сделать. Вам дали задание разработать хранилище для целочисленных значений во встраиваемой операционной системе. Такие системы работают в большей части техники, которая нас окружает: автомобилях, стиральных машинах, микроволновках, холодильниках. Только вот незадача: объём памяти этой системы очень небольшой, поэтому в хранилище не может находиться более 20 элементов. В хранилище, являющееся вектором, с клавиатуры приходят целочисленные значения и помещаются один за другим. При вводе −1 с клавиатуры необходимо вывести всё содержимое хранилища (допускается вывести все 20 элементов, даже если введено меньше). При выводе элементы должны быть в том порядке, в котором они добавлялись. Попробуйте написать максимально оптимизированное решение этой задачи, чтобы совершалось как можно меньше расширений и перемещений элементов внутри вектора.

/*Чтобы задать размера вектора равным 20, используйте: 
std::vector<int> db(20);                   ^ Задаём размер вектора при создании*/

/*input number: 1 
input number: 2 
input number: 3 
… 
input number: 19 
input number: 20 
input number: -1 
output: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 
input number: 21 
input number: 22 
input number: 23 
input number: -1 
output: 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23*/

// Рекомендации по выполнению. Посмотрите, как работает кольцевой буфер. Этот алгоритм поможет быстрее найти решение.
// Что оценивается. Размер вектора не превышает 20 элементов. Нет изменений в размере вектора (это выполняется, если вы выбрали верный алгоритм решения).

#include <iostream>
#include <vector>

int main()
{
    std::vector<int> db(20);
    int pointer = 0;
    int count = 0;

    while (true)
    {
        int num;
        std::cout << "input number: ";
        std::cin >> num;
        if (std::cin.fail())
        {
            std::cerr << "Integer input expected.";
            return 1;
        }
        
        if (num == -1)
        {
            if (count == 20)
            {
                for (int i = 0; i < db.size(); i++)
                {
                    std::cout << db[(i + pointer) % 20] << " ";
                }
            }
            else
            {
                for (int i = 0; i < count; i++)
                {
                    std::cout << db[i] << " ";
                }
            }
            std::cout << std::endl;
        }
        else
        {
            db[pointer] = num;
            pointer = (pointer == 19)? pointer-19 : pointer+1;
            if (count < 20) count++;
        }
        
    }
    
}